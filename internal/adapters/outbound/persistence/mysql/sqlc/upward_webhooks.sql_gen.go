// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: upward_webhooks.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createUpwardliWebhook = `-- name: CreateUpwardliWebhook :exec
INSERT INTO upwardli.webhooks (
        id,
        webhook_name,
        endpoint,
        partner_id,
        status,
        failures,
        last_failure
    )
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateUpwardliWebhookParams struct {
	ID          string        `db:"id" json:"id"`
	WebhookName string        `db:"webhook_name" json:"webhookName"`
	Endpoint    string        `db:"endpoint" json:"endpoint"`
	PartnerID   string        `db:"partner_id" json:"partnerId"`
	Status      string        `db:"status" json:"status"`
	Failures    sql.NullInt32 `db:"failures" json:"failures"`
	LastFailure sql.NullTime  `db:"last_failure" json:"lastFailure"`
}

func (q *Queries) CreateUpwardliWebhook(ctx context.Context, arg CreateUpwardliWebhookParams) error {
	_, err := q.db.ExecContext(ctx, createUpwardliWebhook,
		arg.ID,
		arg.WebhookName,
		arg.Endpoint,
		arg.PartnerID,
		arg.Status,
		arg.Failures,
		arg.LastFailure,
	)
	return err
}

const getAllUpwardliWebhooks = `-- name: GetAllUpwardliWebhooks :many
SELECT id,
    webhook_name,
    endpoint,
    partner_id,
    status,
    failures,
    last_failure,
    created_at,
    updated_at,
    deleted
FROM upwardli.webhooks
WHERE deleted = FALSE
ORDER BY created_at DESC
`

type GetAllUpwardliWebhooksRow struct {
	ID          string        `db:"id" json:"id"`
	WebhookName string        `db:"webhook_name" json:"webhookName"`
	Endpoint    string        `db:"endpoint" json:"endpoint"`
	PartnerID   string        `db:"partner_id" json:"partnerId"`
	Status      string        `db:"status" json:"status"`
	Failures    sql.NullInt32 `db:"failures" json:"failures"`
	LastFailure sql.NullTime  `db:"last_failure" json:"lastFailure"`
	CreatedAt   time.Time     `db:"created_at" json:"createdAt"`
	UpdatedAt   time.Time     `db:"updated_at" json:"updatedAt"`
	Deleted     sql.NullBool  `db:"deleted" json:"deleted"`
}

func (q *Queries) GetAllUpwardliWebhooks(ctx context.Context) ([]GetAllUpwardliWebhooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUpwardliWebhooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUpwardliWebhooksRow{}
	for rows.Next() {
		var i GetAllUpwardliWebhooksRow
		if err := rows.Scan(
			&i.ID,
			&i.WebhookName,
			&i.Endpoint,
			&i.PartnerID,
			&i.Status,
			&i.Failures,
			&i.LastFailure,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUpwardliWebhookById = `-- name: GetUpwardliWebhookById :one
SELECT id,
    webhook_name,
    endpoint,
    partner_id,
    status,
    failures,
    last_failure,
    created_at,
    updated_at,
    deleted
FROM upwardli.webhooks
WHERE id = ?
    AND deleted = FALSE
`

type GetUpwardliWebhookByIdRow struct {
	ID          string        `db:"id" json:"id"`
	WebhookName string        `db:"webhook_name" json:"webhookName"`
	Endpoint    string        `db:"endpoint" json:"endpoint"`
	PartnerID   string        `db:"partner_id" json:"partnerId"`
	Status      string        `db:"status" json:"status"`
	Failures    sql.NullInt32 `db:"failures" json:"failures"`
	LastFailure sql.NullTime  `db:"last_failure" json:"lastFailure"`
	CreatedAt   time.Time     `db:"created_at" json:"createdAt"`
	UpdatedAt   time.Time     `db:"updated_at" json:"updatedAt"`
	Deleted     sql.NullBool  `db:"deleted" json:"deleted"`
}

func (q *Queries) GetUpwardliWebhookById(ctx context.Context, id string) (GetUpwardliWebhookByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUpwardliWebhookById, id)
	var i GetUpwardliWebhookByIdRow
	err := row.Scan(
		&i.ID,
		&i.WebhookName,
		&i.Endpoint,
		&i.PartnerID,
		&i.Status,
		&i.Failures,
		&i.LastFailure,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const softDeleteUpwardliWebhook = `-- name: SoftDeleteUpwardliWebhook :exec
UPDATE upwardli.webhooks
SET deleted = TRUE,
    deleted_at = NOW(),
    updated_at = NOW()
WHERE id = ?
    AND deleted = FALSE
`

func (q *Queries) SoftDeleteUpwardliWebhook(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, softDeleteUpwardliWebhook, id)
	return err
}
